apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

// Add checkstyle, findbugs, pmd and lint to the check task.
check.dependsOn 'codeChecks'

def qualityConfigDir = "${project.rootDir}/config/quality"
def qualityReportsDir = "${project.buildDir}/reports"

checkstyle {
    toolVersion ='8.12'
    ignoreFailures = false
    showViolations = true
    reportsDir = file("${qualityReportsDir}/checkstyle/")
    configFile = file("$qualityConfigDir/checkstyle/checkstyle.xml")
}

pmd {
    toolVersion = '6.7.0'
    ignoreFailures = false
    consoleOutput = true
    rulePriority = 3
    ruleSets = []
    reportsDir = file("${qualityReportsDir}/pmd/")
    ruleSetFiles = files("$qualityConfigDir/pmd/pmd-ruleset.xml")
}

findbugs {
    toolVersion = '3.0.1'
    ignoreFailures = false
    effort = 'max'
    reportLevel = 'high'
    reportsDir = file("${qualityReportsDir}/findbugs/")
}

task codeChecks {
    group 'verification'
    description 'Runs all code analysis checks'
    dependsOn 'checkstyle', 'pmd', 'findbugs'
}

android {
    applicationVariants.all { variant ->
        if(variant.buildType.name == 'debug') {
            codeChecks {
                dependsOn "lint${variant.name.capitalize()}"
            }
        }
    }
}

task checkstyle(type: Checkstyle) {
    group 'verification'
    description 'Runs the Checkstyle coding standards enforcement'

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()

    reports {
        xml.enabled false
        html.enabled true
    }
}

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {
    group 'verification'
    description 'Runs the FindBugs analysis tool'
    excludeFilter new File("$qualityConfigDir/findbugs/findbugs-filter.xml")
    classes = files("${project.rootDir}/app/build/intermediates/classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()

    reports {
        xml.enabled false
        html.enabled true
    }
}

task pmd(type: Pmd) {
    group 'verification'
    description 'Runs the PMD source code analyzer'

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled false
        html.enabled true
    }
}

android {
    lintOptions {
        abortOnError true
        explainIssues true
        xmlReport false
        htmlReport true
        textReport true
        lintConfig file("$qualityConfigDir/lint/lint.xml")
        htmlOutput file("$qualityReportsDir/lint/lint-result.html")
        xmlOutput file("$qualityReportsDir/lint/lint-result.xml")
        textOutput "stdout"
    }
}
